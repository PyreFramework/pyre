// -*- C++ -*-
// -*- coding: utf-8 -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2019 all rights reserved
//

// code guard
#if !defined(pyre_memory_MemoryMap_icc)
#error This header file contains implementation details of class pyre::memory::MemoryMap
#endif

// meta-methods
pyre::memory::MemoryMap::
~MemoryMap() {
    // make a channel
    pyre::journal::debug_t channel("pyre.memory.direct");

    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "destructor"
        << pyre::journal::newline
        << "    buffer: " << _buffer
        << pyre::journal::endl;

    // if i have a valid buffer
    if (_buffer) {
        // unmap it
        unmap(_buffer, _bytes);
    }
    // all done
    return;
}

pyre::memory::MemoryMap::
MemoryMap(MemoryMap && other) :
    _uri {},
    _info {},
    _bytes(),
    _buffer()
{
    // make a channel
    pyre::journal::debug_t channel("pyre.memory.direct");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "copy constructor with move semantics: "
        << pyre::journal::newline
        << "    this buffer: " << _buffer
        << pyre::journal::newline
        << "    other buffer: " << other._buffer
        << pyre::journal::endl;

    // delegate to the move assignment operator
    *this = std::move(other);
}

pyre::memory::MemoryMap &
pyre::memory::MemoryMap::
operator=(MemoryMap && other) {
    // make a channel
    pyre::journal::debug_t channel("pyre.memory.direct");
    // tell me
    channel
        << pyre::journal::at(__HERE__)
        << "operator= with move semantics: "
        << pyre::journal::newline
        << "    this buffer: " << _buffer
        << pyre::journal::newline
        << "    other buffer: " << other._buffer
        << pyre::journal::endl;

    // trap assignment to self
    if (this == &other) {
        // and bail
        return *this;
    }

    // if my current buffer is valid
    if (_buffer) {
        // unmap the memory
        unmap(_buffer, _bytes);
    }
    // pilfer from the other
    _buffer = other._buffer;
    _bytes = other._bytes;
    // invalidate him
    other._buffer = 0;
    other._bytes = 0;
    // make me available
    return *this;
}

// accessors
auto
pyre::memory::MemoryMap::
uri() const {
    // easy enough
    return _uri;
}

auto
pyre::memory::MemoryMap::
bytes() const {
    // easy enough
    return _bytes;
}

auto
pyre::memory::MemoryMap::
buffer() const {
    // easy enough
    return _buffer;
}

const auto &
pyre::memory::MemoryMap::
fileinfo() const {
    // easy enough
    return _info;
}

// end of file
